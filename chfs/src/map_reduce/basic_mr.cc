#include <string>
#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>

#include "map_reduce/protocol.h"

namespace mapReduce{
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
    std::vector<KeyVal> Map(const std::string &content) {
        // Your code goes here
        // Hints: split contents into an array of words.
        std::vector<KeyVal> ret;
        std::map<std::string, int> kvmap;
        std::string temp;
        for (size_t i = 0; i < content.length(); ++i)
        {
            if (std::isalpha(content[i]))
            {
                temp += content[i];
            }
            else
            {
                if (temp != "") {
                    if (kvmap.count(temp) > 0) kvmap[temp]++;
                    else kvmap.insert(std::pair<std::string, int>(temp, 1));
//                    std::cout << "the word is " << temp << std::endl;
                }
                temp = "";
            }
        }
        for (auto it = kvmap.begin(); it != kvmap.end(); it++)
        {

            KeyVal keyVal(it->first, std::to_string(it->second));
            ret.push_back(keyVal);
        }
        return ret;

    }

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
    std::string Reduce(const std::string &key, const std::vector<std::string> &values) {
        // Your code goes here
        // Hints: return the number of occurrences of the word.
        std::string ret = "0";
        int count = 0;
        for (std::string value: values)
        {
            count += std::atoi(value.c_str());
        }
        ret = std::to_string(count);
        return ret;
    }
}